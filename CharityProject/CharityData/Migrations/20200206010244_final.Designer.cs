// <auto-generated />
using System;
using CharityProject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CharityData.Migrations
{
    [DbContext(typeof(CharityContext))]
    [Migration("20200206010244_final")]
    partial class final
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CharityData.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("email");

                    b.Property<Guid>("imageId");

                    b.Property<bool>("isUser");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("account");

                    b.HasData(
                        new { Id = new Guid("95fdb517-78c3-4665-8b8b-babbb789c50f"), email = "sampleUser1@mail.com", imageId = new Guid("dfb13851-efce-4964-920a-3ac71ebc8316"), isUser = true, password = "c72a944b810cb996c3107ae0a774980f1e4ec1232990a3c62a73c750675bcd5d", username = "sampleUser1" },
                        new { Id = new Guid("377107d9-f1da-425e-8aba-32f52f337531"), email = "sampleUser2@mail.com", imageId = new Guid("7d265c6c-87ac-44fd-88d5-6f20838020bb"), isUser = true, password = "defd7d850c9632421ba1244bc22642facdc2115c60dbd0d2663b1117ba4f50a9", username = "sampleUser2" },
                        new { Id = new Guid("3c06972a-bbe2-4587-a9b8-d50376d3a7c2"), email = "sampleUser3@mail.com", imageId = new Guid("7723e728-4866-48e6-99a8-9d01376bb051"), isUser = true, password = "d4481413102ca87dc30943994469caad1ab2de1b869514348b003553bde4d3b1", username = "sampleUser3" },
                        new { Id = new Guid("faa2ec27-abb7-4ee7-b527-25210c5ef046"), email = "sampleUser4@mail.com", imageId = new Guid("ab2500e6-bda6-410e-85d1-23faaad6c169"), isUser = false, password = "4d5c81c22882ff79cc1c45031acd9afcd1cf063f9b6d664adb1d33cf4c681807", username = "sampleUser4" },
                        new { Id = new Guid("78edd9de-d5f2-4374-8644-0c6af464ea2d"), email = "sampleUser5@mail.com", imageId = new Guid("efc91466-1507-4221-a871-73862e028fb2"), isUser = false, password = "cc6b98042e62e0c4da7110a42dcd7aaf20ec2bbc250b89923353d39483ef46a4", username = "sampleUser5" }
                    );
                });

            modelBuilder.Entity("CharityData.Models.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("amount");

                    b.Property<string>("bankName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("creditCardNumber")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<DateTime>("dateOfExpiry");

                    b.HasKey("Id");

                    b.ToTable("card");

                    b.HasData(
                        new { Id = new Guid("f69ff571-7ffd-4759-89c6-e06b3eb1af52"), amount = 100.0, bankName = "Karntner Sparkasse", creditCardNumber = "1234567891011121", dateOfExpiry = new DateTime(2020, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = new Guid("a506e081-3b81-46bc-86c1-c4c9c0205d79"), amount = 50.0, bankName = "Karntner Sparkasse", creditCardNumber = "3141516171819202", dateOfExpiry = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = new Guid("e52bb81d-1739-487e-8ea2-24e0fca1fd85"), amount = 150.0, bankName = "Karntner Ladesbank Raiffeisen", creditCardNumber = "1222324252627282", dateOfExpiry = new DateTime(2020, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = new Guid("85546222-5128-4bdf-beff-225b93bff9d5"), amount = 200.0, bankName = "Austria Bank", creditCardNumber = "9303132333435363", dateOfExpiry = new DateTime(2021, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = new Guid("eb89c01a-98b9-42fa-8f73-9472ece01f08"), amount = 55.0, bankName = "Austria Bank", creditCardNumber = "7383940414243444", dateOfExpiry = new DateTime(2020, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("CharityData.Models.CharityAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("actionType");

                    b.Property<DateTime>("creationDateTime");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("endDateTime");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("organizationId");

                    b.Property<DateTime>("startDateTime");

                    b.HasKey("Id");

                    b.ToTable("action");

                    b.HasData(
                        new { Id = new Guid("04df63a9-f8b9-4b3e-9be9-39d67a138ad2"), actionType = false, creationDateTime = new DateTime(2020, 2, 6, 2, 2, 44, 0, DateTimeKind.Unspecified), description = "This is a generic action where you sign up to participate", endDateTime = new DateTime(2020, 2, 5, 2, 2, 44, 0, DateTimeKind.Unspecified), name = "Race for cure", organizationId = new Guid("43631509-6931-4542-ae13-69a676a7b94d"), startDateTime = new DateTime(2020, 2, 6, 2, 2, 44, 0, DateTimeKind.Unspecified) },
                        new { Id = new Guid("f417fcf9-35a0-4b2f-8403-4aa6606335df"), actionType = true, creationDateTime = new DateTime(2020, 2, 6, 2, 2, 44, 0, DateTimeKind.Unspecified), description = "This is a generic action where people donate stuff", endDateTime = new DateTime(2020, 2, 5, 2, 2, 44, 0, DateTimeKind.Unspecified), name = "Fundraising for children without parents", organizationId = new Guid("43631509-6931-4542-ae13-69a676a7b94d"), startDateTime = new DateTime(2020, 2, 6, 2, 2, 44, 0, DateTimeKind.Unspecified) },
                        new { Id = new Guid("82c15e08-5e3b-40b6-92e8-1ae6a6a43620"), actionType = true, creationDateTime = new DateTime(2020, 2, 6, 2, 2, 44, 0, DateTimeKind.Unspecified), description = "This is another action where people donate stuff", endDateTime = new DateTime(2020, 2, 5, 2, 2, 44, 0, DateTimeKind.Unspecified), name = "Another fundraising", organizationId = new Guid("0013da1b-377a-4fc5-8fb4-5db51d14659e"), startDateTime = new DateTime(2020, 2, 6, 2, 2, 44, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("CharityData.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Path");

                    b.HasKey("Id");

                    b.ToTable("image");

                    b.HasData(
                        new { Id = new Guid("dfb13851-efce-4964-920a-3ac71ebc8316"), Path = "https://i.pinimg.com/originals/df/bd/df/dfbddf7c530ab5f4cd70154409651f9d.jpg" },
                        new { Id = new Guid("7d265c6c-87ac-44fd-88d5-6f20838020bb"), Path = "http://bestdayevereducation.com/uploads/images/FreeVector-Spongebob-Squarepants-Vector.jpg" },
                        new { Id = new Guid("7723e728-4866-48e6-99a8-9d01376bb051"), Path = "https://arc-anglerfish-arc2-prod-elcomercio.s3.amazonaws.com/public/AVA6IKPJNBAS7JZ3CREUNY64K4.jpg" },
                        new { Id = new Guid("ab2500e6-bda6-410e-85d1-23faaad6c169"), Path = "https://upload.wikimedia.org/wikipedia/commons/thumb/8/80/Cartoon_Network_2010_logo.svg/2000px-Cartoon_Network_2010_logo.svg.png" },
                        new { Id = new Guid("efc91466-1507-4221-a871-73862e028fb2"), Path = "https://cdn.vox-cdn.com/thumbor/m6_h4h6uHuJeZCnWTCz7anTlVJA=/0x0:1920x1080/1200x800/filters:focal(807x387:1113x693)/cdn.vox-cdn.com/uploads/chorus_image/image/60720529/disneyplus.0.4.jpg" }
                    );
                });

            modelBuilder.Entity("CharityData.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("description")
                        .HasMaxLength(200);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("userDonatedId");

                    b.Property<int>("value");

                    b.HasKey("Id");

                    b.ToTable("item");

                    b.HasData(
                        new { Id = new Guid("7ccf604e-227f-4451-afb0-6f21855a9af2"), description = "A ball for playing basketball", name = "Basketball", userDonatedId = new Guid("22cf0ccf-1511-435b-b1a8-1bd4a4361149"), value = 50 },
                        new { Id = new Guid("d16b79f7-9bf5-4210-9998-331b725c771c"), description = "Some spare makeup I donate", name = "Makeup", userDonatedId = new Guid("efca8335-bb04-49fe-ae33-7ca973b11cc4"), value = 150 }
                    );
                });

            modelBuilder.Entity("CharityData.Models.ItemInAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("actionId");

                    b.Property<Guid>("itemId");

                    b.HasKey("Id");

                    b.ToTable("itemInAction");

                    b.HasData(
                        new { Id = new Guid("f581c6e0-05b5-4c38-8ca7-55476085e7bd"), actionId = new Guid("f417fcf9-35a0-4b2f-8403-4aa6606335df"), itemId = new Guid("7ccf604e-227f-4451-afb0-6f21855a9af2") },
                        new { Id = new Guid("19f8fcc7-f09d-4e63-aaa5-08a8cea6ee82"), actionId = new Guid("f417fcf9-35a0-4b2f-8403-4aa6606335df"), itemId = new Guid("7ccf604e-227f-4451-afb0-6f21855a9af2") },
                        new { Id = new Guid("a605b1dd-8801-4dd0-b0c8-058e05458cf3"), actionId = new Guid("82c15e08-5e3b-40b6-92e8-1ae6a6a43620"), itemId = new Guid("d16b79f7-9bf5-4210-9998-331b725c771c") }
                    );
                });

            modelBuilder.Entity("CharityData.Models.Messages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("message")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<Guid>("organizationReceiverId");

                    b.Property<Guid>("organizationSenderId");

                    b.Property<DateTime>("sendingTime");

                    b.Property<Guid>("userReceiverId");

                    b.Property<Guid>("userSenderId");

                    b.HasKey("Id");

                    b.ToTable("message");

                    b.HasData(
                        new { Id = new Guid("7fc96dce-a070-469e-a5a4-8a0ea3a15fad"), message = "May I participate in your action :)", organizationReceiverId = new Guid("43631509-6931-4542-ae13-69a676a7b94d"), organizationSenderId = new Guid("00000000-0000-0000-0000-000000000000"), sendingTime = new DateTime(2019, 11, 20, 22, 24, 30, 0, DateTimeKind.Unspecified), userReceiverId = new Guid("00000000-0000-0000-0000-000000000000"), userSenderId = new Guid("22cf0ccf-1511-435b-b1a8-1bd4a4361149") },
                        new { Id = new Guid("944dd5be-a0c3-4bb0-857f-4fca5f94c16f"), message = "Of course you can. All the best.", organizationReceiverId = new Guid("00000000-0000-0000-0000-000000000000"), organizationSenderId = new Guid("43631509-6931-4542-ae13-69a676a7b94d"), sendingTime = new DateTime(2019, 11, 20, 23, 25, 30, 0, DateTimeKind.Unspecified), userReceiverId = new Guid("22cf0ccf-1511-435b-b1a8-1bd4a4361149"), userSenderId = new Guid("00000000-0000-0000-0000-000000000000") },
                        new { Id = new Guid("80043bdc-3e41-4a17-af55-b02d0d57d179"), message = "How are you my friend?", organizationReceiverId = new Guid("00000000-0000-0000-0000-000000000000"), organizationSenderId = new Guid("00000000-0000-0000-0000-000000000000"), sendingTime = new DateTime(2019, 10, 15, 20, 0, 0, 0, DateTimeKind.Unspecified), userReceiverId = new Guid("7e783f5b-290d-4247-a206-2ae626d5c664"), userSenderId = new Guid("efca8335-bb04-49fe-ae33-7ca973b11cc4") },
                        new { Id = new Guid("5e3fc4b2-1c10-4e26-b793-a27fb4a387aa"), message = "All is well, thank you, and you?", organizationReceiverId = new Guid("00000000-0000-0000-0000-000000000000"), organizationSenderId = new Guid("00000000-0000-0000-0000-000000000000"), sendingTime = new DateTime(2019, 10, 15, 21, 0, 0, 0, DateTimeKind.Unspecified), userReceiverId = new Guid("efca8335-bb04-49fe-ae33-7ca973b11cc4"), userSenderId = new Guid("7e783f5b-290d-4247-a206-2ae626d5c664") },
                        new { Id = new Guid("1abf5a23-bcb8-46cd-a509-f6dd64e28e66"), message = "I am fine, thanks", organizationReceiverId = new Guid("00000000-0000-0000-0000-000000000000"), organizationSenderId = new Guid("00000000-0000-0000-0000-000000000000"), sendingTime = new DateTime(2019, 10, 15, 22, 0, 0, 0, DateTimeKind.Unspecified), userReceiverId = new Guid("7e783f5b-290d-4247-a206-2ae626d5c664"), userSenderId = new Guid("efca8335-bb04-49fe-ae33-7ca973b11cc4") }
                    );
                });

            modelBuilder.Entity("CharityData.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("UserAccount");

                    b.Property<Guid>("creditCardNumber");

                    b.Property<DateTime>("dateOfFounding");

                    b.Property<string>("description")
                        .HasMaxLength(200);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("organization");

                    b.HasData(
                        new { Id = new Guid("43631509-6931-4542-ae13-69a676a7b94d"), UserAccount = new Guid("faa2ec27-abb7-4ee7-b527-25210c5ef046"), creditCardNumber = new Guid("85546222-5128-4bdf-beff-225b93bff9d5"), dateOfFounding = new DateTime(2015, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), description = "This is a sample organization for doing something which is good", name = "CharityOrg1" },
                        new { Id = new Guid("0013da1b-377a-4fc5-8fb4-5db51d14659e"), UserAccount = new Guid("78edd9de-d5f2-4374-8644-0c6af464ea2d"), creditCardNumber = new Guid("eb89c01a-98b9-42fa-8f73-9472ece01f08"), dateOfFounding = new DateTime(2019, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), description = "This organization does charity actions which are great!", name = "CharityOrg2" }
                    );
                });

            modelBuilder.Entity("CharityData.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("amount");

                    b.Property<Guid>("organizationReceiverId");

                    b.Property<Guid>("userSenderId");

                    b.HasKey("Id");

                    b.ToTable("payment");

                    b.HasData(
                        new { Id = new Guid("a3d0629d-b4bf-4a2d-a722-518fa2de1028"), amount = 100.0, organizationReceiverId = new Guid("43631509-6931-4542-ae13-69a676a7b94d"), userSenderId = new Guid("22cf0ccf-1511-435b-b1a8-1bd4a4361149") },
                        new { Id = new Guid("2c227ab7-7e35-4ee7-a718-844e35e1f94d"), amount = 100.0, organizationReceiverId = new Guid("0013da1b-377a-4fc5-8fb4-5db51d14659e"), userSenderId = new Guid("22cf0ccf-1511-435b-b1a8-1bd4a4361149") },
                        new { Id = new Guid("306a3887-431c-4bc6-a551-b13de03d83ac"), amount = 100.0, organizationReceiverId = new Guid("43631509-6931-4542-ae13-69a676a7b94d"), userSenderId = new Guid("efca8335-bb04-49fe-ae33-7ca973b11cc4") }
                    );
                });

            modelBuilder.Entity("CharityData.Models.ProfilePosts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("actionId");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<Guid>("userId");

                    b.HasKey("Id");

                    b.ToTable("profilePosts");

                    b.HasData(
                        new { Id = new Guid("5b44ef62-3476-4d60-84d5-d8b9f0ceab64"), actionId = new Guid("04df63a9-f8b9-4b3e-9be9-39d67a138ad2"), message = "I just did something in this action", userId = new Guid("22cf0ccf-1511-435b-b1a8-1bd4a4361149") },
                        new { Id = new Guid("06f26859-e235-422f-aa64-47de45ccaaf0"), actionId = new Guid("f417fcf9-35a0-4b2f-8403-4aa6606335df"), message = "I did something too", userId = new Guid("efca8335-bb04-49fe-ae33-7ca973b11cc4") },
                        new { Id = new Guid("79787603-0835-4224-afc0-6776b2ab9b9d"), actionId = new Guid("82c15e08-5e3b-40b6-92e8-1ae6a6a43620"), message = "Normally, I did as well.", userId = new Guid("7e783f5b-290d-4247-a206-2ae626d5c664") }
                    );
                });

            modelBuilder.Entity("CharityData.Models.ReactionsToPosts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("commentText");

                    b.Property<bool>("commented");

                    b.Property<bool>("liked");

                    b.Property<Guid>("postId");

                    b.Property<Guid>("userReactedId");

                    b.HasKey("Id");

                    b.ToTable("reactionsToPosts");

                    b.HasData(
                        new { Id = new Guid("9a0a8808-6c5a-45ec-b167-f69b21211ad6"), commented = false, liked = true, postId = new Guid("5b44ef62-3476-4d60-84d5-d8b9f0ceab64"), userReactedId = new Guid("7e783f5b-290d-4247-a206-2ae626d5c664") },
                        new { Id = new Guid("0434b8f8-ef72-4680-b01a-caec95ee8d21"), commentText = "Glad you did that!", commented = true, liked = true, postId = new Guid("06f26859-e235-422f-aa64-47de45ccaaf0"), userReactedId = new Guid("22cf0ccf-1511-435b-b1a8-1bd4a4361149") },
                        new { Id = new Guid("2587b2a0-97d5-48d2-b1fd-8cbdfd44ff33"), commented = false, liked = true, postId = new Guid("79787603-0835-4224-afc0-6776b2ab9b9d"), userReactedId = new Guid("efca8335-bb04-49fe-ae33-7ca973b11cc4") }
                    );
                });

            modelBuilder.Entity("CharityData.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("UserAccount");

                    b.Property<Guid>("creditCardId");

                    b.Property<DateTime>("dateOfBirth");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("user");

                    b.HasData(
                        new { Id = new Guid("22cf0ccf-1511-435b-b1a8-1bd4a4361149"), UserAccount = new Guid("95fdb517-78c3-4665-8b8b-babbb789c50f"), creditCardId = new Guid("f69ff571-7ffd-4759-89c6-e06b3eb1af52"), dateOfBirth = new DateTime(1997, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), firstName = "Foo", gender = "M", lastName = "Bar" },
                        new { Id = new Guid("efca8335-bb04-49fe-ae33-7ca973b11cc4"), UserAccount = new Guid("377107d9-f1da-425e-8aba-32f52f337531"), creditCardId = new Guid("a506e081-3b81-46bc-86c1-c4c9c0205d79"), dateOfBirth = new DateTime(1980, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), firstName = "John", gender = "F", lastName = "Doe" },
                        new { Id = new Guid("7e783f5b-290d-4247-a206-2ae626d5c664"), UserAccount = new Guid("3c06972a-bbe2-4587-a9b8-d50376d3a7c2"), creditCardId = new Guid("e52bb81d-1739-487e-8ea2-24e0fca1fd85"), dateOfBirth = new DateTime(1970, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), firstName = "Nicholas", gender = "M", lastName = "Cage" }
                    );
                });

            modelBuilder.Entity("CharityData.Models.UserParticipatingInAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("actionId");

                    b.Property<Guid>("userId");

                    b.HasKey("Id");

                    b.ToTable("userParticipatingInAction");

                    b.HasData(
                        new { Id = new Guid("e61f381c-8e5e-48a1-929b-4996f71d6999"), actionId = new Guid("04df63a9-f8b9-4b3e-9be9-39d67a138ad2"), userId = new Guid("22cf0ccf-1511-435b-b1a8-1bd4a4361149") },
                        new { Id = new Guid("5673522e-4e5b-43b9-b3e0-aa08979b2ced"), actionId = new Guid("f417fcf9-35a0-4b2f-8403-4aa6606335df"), userId = new Guid("efca8335-bb04-49fe-ae33-7ca973b11cc4") },
                        new { Id = new Guid("717c9b4e-c63c-4007-93af-223d5e5b6393"), actionId = new Guid("82c15e08-5e3b-40b6-92e8-1ae6a6a43620"), userId = new Guid("7e783f5b-290d-4247-a206-2ae626d5c664") }
                    );
                });
#pragma warning restore 612, 618
        }
    }
}
