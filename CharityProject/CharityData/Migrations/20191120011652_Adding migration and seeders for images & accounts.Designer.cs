// <auto-generated />
using System;
using CharityProject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CharityData.Migrations
{
    [DbContext(typeof(CharityContext))]
    [Migration("20191120011652_Adding migration and seeders for images & accounts")]
    partial class Addingmigrationandseedersforimagesaccounts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CharityData.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("imageId");

                    b.Property<bool>("isUser");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("account");

                    b.HasData(
                        new { Id = new Guid("a03f3d14-eef0-4ce2-a83d-128860a1ac48"), imageId = new Guid("2805fd38-1045-4599-8be5-7f246c42a139"), isUser = true, password = "samplepass1", username = "sampleUser1" },
                        new { Id = new Guid("5e7b9739-21d8-4280-a732-2dc716257917"), imageId = new Guid("9bf24606-4b16-4f1c-ba35-0e44a6907a4e"), isUser = true, password = "samplepass2", username = "sampleUser2" },
                        new { Id = new Guid("f5749f73-21de-49d7-bd67-7dc66279ccc2"), imageId = new Guid("7c886424-3f8b-480d-8e14-b4364576bf0f"), isUser = true, password = "samplepass3", username = "sampleUser3" },
                        new { Id = new Guid("bba863a6-a3fc-4567-bda6-619abb15e9c7"), imageId = new Guid("22aa4e4c-91e1-4f5c-9c0c-cc48b1500084"), isUser = false, password = "samplepass4", username = "sampleUser4" },
                        new { Id = new Guid("5f3262d0-c5d6-48ec-a946-8acf0159a1cc"), imageId = new Guid("e04871da-793f-4089-8cf7-07fe52b112ec"), isUser = false, password = "samplepass5", username = "sampleUser5" }
                    );
                });

            modelBuilder.Entity("CharityData.Models.Action", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("actionType");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("organizationId");

                    b.HasKey("Id");

                    b.ToTable("action");
                });

            modelBuilder.Entity("CharityData.Models.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("bankName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("dateOfExpiry");

                    b.HasKey("Id");

                    b.ToTable("card");
                });

            modelBuilder.Entity("CharityData.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Path");

                    b.HasKey("Id");

                    b.ToTable("image");

                    b.HasData(
                        new { Id = new Guid("2805fd38-1045-4599-8be5-7f246c42a139"), Path = "https://i.pinimg.com/originals/df/bd/df/dfbddf7c530ab5f4cd70154409651f9d.jpg" },
                        new { Id = new Guid("9bf24606-4b16-4f1c-ba35-0e44a6907a4e"), Path = "http://bestdayevereducation.com/uploads/images/FreeVector-Spongebob-Squarepants-Vector.jpg" },
                        new { Id = new Guid("7c886424-3f8b-480d-8e14-b4364576bf0f"), Path = "https://arc-anglerfish-arc2-prod-elcomercio.s3.amazonaws.com/public/AVA6IKPJNBAS7JZ3CREUNY64K4.jpg" },
                        new { Id = new Guid("22aa4e4c-91e1-4f5c-9c0c-cc48b1500084"), Path = "https://upload.wikimedia.org/wikipedia/commons/thumb/8/80/Cartoon_Network_2010_logo.svg/2000px-Cartoon_Network_2010_logo.svg.png" },
                        new { Id = new Guid("e04871da-793f-4089-8cf7-07fe52b112ec"), Path = "https://cdn.vox-cdn.com/thumbor/m6_h4h6uHuJeZCnWTCz7anTlVJA=/0x0:1920x1080/1200x800/filters:focal(807x387:1113x693)/cdn.vox-cdn.com/uploads/chorus_image/image/60720529/disneyplus.0.4.jpg" }
                    );
                });

            modelBuilder.Entity("CharityData.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("description")
                        .HasMaxLength(200);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("value");

                    b.HasKey("Id");

                    b.ToTable("item");
                });

            modelBuilder.Entity("CharityData.Models.ItemInAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("actionId");

                    b.Property<Guid>("itemId");

                    b.HasKey("Id");

                    b.ToTable("itemInAction");
                });

            modelBuilder.Entity("CharityData.Models.Messages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("message")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<Guid>("organizationReceiverId");

                    b.Property<Guid>("organizationSenderId");

                    b.Property<Guid>("userReceiverId");

                    b.Property<Guid>("userSenderId");

                    b.HasKey("Id");

                    b.ToTable("message");
                });

            modelBuilder.Entity("CharityData.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("UserAccount");

                    b.Property<Guid>("creditCardNumberId");

                    b.Property<DateTime>("dateOfFounding");

                    b.Property<string>("description")
                        .HasMaxLength(200);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("creditCardNumberId");

                    b.ToTable("organization");
                });

            modelBuilder.Entity("CharityData.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("amount");

                    b.Property<Guid>("organizationReceiverId");

                    b.Property<Guid>("userSenderId");

                    b.HasKey("Id");

                    b.ToTable("payment");
                });

            modelBuilder.Entity("CharityData.Models.ProfilePosts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("actionId");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<Guid>("userId");

                    b.HasKey("Id");

                    b.ToTable("profilePosts");
                });

            modelBuilder.Entity("CharityData.Models.ReactionsToPosts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("commented");

                    b.Property<bool>("liked");

                    b.Property<Guid>("postId");

                    b.HasKey("Id");

                    b.ToTable("reactionsToPosts");
                });

            modelBuilder.Entity("CharityData.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("UserAccount");

                    b.Property<Guid>("creditCardId");

                    b.Property<DateTime>("dateOfBirth");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("CharityData.Models.UserParticipatingInAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("actionId");

                    b.Property<Guid>("userId");

                    b.HasKey("Id");

                    b.ToTable("userParticipatingInAction");
                });

            modelBuilder.Entity("CharityData.Models.Organization", b =>
                {
                    b.HasOne("CharityData.Models.Card", "creditCardNumber")
                        .WithMany()
                        .HasForeignKey("creditCardNumberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
