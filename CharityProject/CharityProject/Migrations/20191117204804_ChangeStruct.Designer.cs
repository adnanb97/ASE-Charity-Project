// <auto-generated />
using System;
using CharityProject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CharityProject.Migrations
{
    [DbContext(typeof(CharityContext))]
    [Migration("20191117204804_ChangeStruct")]
    partial class ChangeStruct
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CharityData.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("imageIdId");

                    b.Property<bool>("isUser");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("imageIdId");

                    b.ToTable("account");
                });

            modelBuilder.Entity("CharityData.Models.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("actionType");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("organizationIdId");

                    b.HasKey("Id");

                    b.HasIndex("organizationIdId");

                    b.ToTable("action");
                });

            modelBuilder.Entity("CharityData.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("bankName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("dateOfExpiry");

                    b.HasKey("Id");

                    b.ToTable("card");
                });

            modelBuilder.Entity("CharityData.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Path");

                    b.HasKey("Id");

                    b.ToTable("image");
                });

            modelBuilder.Entity("CharityData.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description")
                        .HasMaxLength(200);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("value");

                    b.HasKey("Id");

                    b.ToTable("item");
                });

            modelBuilder.Entity("CharityData.Models.ItemInAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("actionIdId");

                    b.Property<int>("itemIdId");

                    b.HasKey("Id");

                    b.HasIndex("actionIdId");

                    b.HasIndex("itemIdId");

                    b.ToTable("itemInAction");
                });

            modelBuilder.Entity("CharityData.Models.Messages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("message")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int?>("organizationReceiverIdId");

                    b.Property<int?>("organizationSenderIdId");

                    b.Property<int?>("userReceiverIdId");

                    b.Property<int?>("userSenderIdId");

                    b.HasKey("Id");

                    b.HasIndex("organizationReceiverIdId");

                    b.HasIndex("organizationSenderIdId");

                    b.HasIndex("userReceiverIdId");

                    b.HasIndex("userSenderIdId");

                    b.ToTable("message");
                });

            modelBuilder.Entity("CharityData.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("UserAccountId");

                    b.Property<int>("creditCardNumberId");

                    b.Property<DateTime>("dateOfFounding");

                    b.Property<string>("description")
                        .HasMaxLength(200);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.HasIndex("creditCardNumberId");

                    b.ToTable("organization");
                });

            modelBuilder.Entity("CharityData.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("amount");

                    b.Property<int>("organizationReceiverIdId");

                    b.Property<int>("userSenderIdId");

                    b.HasKey("Id");

                    b.HasIndex("organizationReceiverIdId");

                    b.HasIndex("userSenderIdId");

                    b.ToTable("payment");
                });

            modelBuilder.Entity("CharityData.Models.ProfilePosts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("actionIdId");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("userIdId");

                    b.HasKey("Id");

                    b.HasIndex("actionIdId");

                    b.HasIndex("userIdId");

                    b.ToTable("profilePosts");
                });

            modelBuilder.Entity("CharityData.Models.ReactionsToPosts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("commented");

                    b.Property<bool>("liked");

                    b.Property<int>("postIdId");

                    b.HasKey("Id");

                    b.HasIndex("postIdId");

                    b.ToTable("reactionsToPosts");
                });

            modelBuilder.Entity("CharityData.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("UserAccountId");

                    b.Property<int?>("creditCardIdId");

                    b.Property<DateTime>("dateOfBirth");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.HasIndex("creditCardIdId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("CharityData.Models.UserParticipatingInAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("actionIdId");

                    b.Property<int?>("userIdId");

                    b.HasKey("Id");

                    b.HasIndex("actionIdId");

                    b.HasIndex("userIdId");

                    b.ToTable("userParticipatingInAction");
                });

            modelBuilder.Entity("CharityData.Models.Account", b =>
                {
                    b.HasOne("CharityData.Models.Image", "imageId")
                        .WithMany()
                        .HasForeignKey("imageIdId");
                });

            modelBuilder.Entity("CharityData.Models.Action", b =>
                {
                    b.HasOne("CharityData.Models.Organization", "organizationId")
                        .WithMany()
                        .HasForeignKey("organizationIdId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CharityData.Models.ItemInAction", b =>
                {
                    b.HasOne("CharityData.Models.Action", "actionId")
                        .WithMany()
                        .HasForeignKey("actionIdId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CharityData.Models.Item", "itemId")
                        .WithMany()
                        .HasForeignKey("itemIdId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CharityData.Models.Messages", b =>
                {
                    b.HasOne("CharityData.Models.Organization", "organizationReceiverId")
                        .WithMany()
                        .HasForeignKey("organizationReceiverIdId");

                    b.HasOne("CharityData.Models.Organization", "organizationSenderId")
                        .WithMany()
                        .HasForeignKey("organizationSenderIdId");

                    b.HasOne("CharityData.Models.User", "userReceiverId")
                        .WithMany()
                        .HasForeignKey("userReceiverIdId");

                    b.HasOne("CharityData.Models.User", "userSenderId")
                        .WithMany()
                        .HasForeignKey("userSenderIdId");
                });

            modelBuilder.Entity("CharityData.Models.Organization", b =>
                {
                    b.HasOne("CharityData.Models.Account", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserAccountId");

                    b.HasOne("CharityData.Models.Card", "creditCardNumber")
                        .WithMany()
                        .HasForeignKey("creditCardNumberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CharityData.Models.Payment", b =>
                {
                    b.HasOne("CharityData.Models.Organization", "organizationReceiverId")
                        .WithMany()
                        .HasForeignKey("organizationReceiverIdId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CharityData.Models.User", "userSenderId")
                        .WithMany()
                        .HasForeignKey("userSenderIdId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CharityData.Models.ProfilePosts", b =>
                {
                    b.HasOne("CharityData.Models.Action", "actionId")
                        .WithMany()
                        .HasForeignKey("actionIdId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CharityData.Models.User", "userId")
                        .WithMany()
                        .HasForeignKey("userIdId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CharityData.Models.ReactionsToPosts", b =>
                {
                    b.HasOne("CharityData.Models.ProfilePosts", "postId")
                        .WithMany()
                        .HasForeignKey("postIdId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CharityData.Models.User", b =>
                {
                    b.HasOne("CharityData.Models.Account", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserAccountId");

                    b.HasOne("CharityData.Models.Card", "creditCardId")
                        .WithMany()
                        .HasForeignKey("creditCardIdId");
                });

            modelBuilder.Entity("CharityData.Models.UserParticipatingInAction", b =>
                {
                    b.HasOne("CharityData.Models.Action", "actionId")
                        .WithMany()
                        .HasForeignKey("actionIdId");

                    b.HasOne("CharityData.Models.User", "userId")
                        .WithMany()
                        .HasForeignKey("userIdId");
                });
#pragma warning restore 612, 618
        }
    }
}
